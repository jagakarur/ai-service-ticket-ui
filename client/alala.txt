REST end point : 
http://20.96.44.183:80/api/v1/service/bertexpl/score 

Primary Key: 
ewFVGMkduns4r45OWqkmh7OSs69pQ4Wt 

Secondary Key:
WcLIBRgXathbF6Gy0rIDTnSw7i67FsgH


Consumption Layer:


import urllib.request import json import os import ssl def allowSelfSignedHttps(allowed): # bypass the server certificate verification on client side if allowed and not os.environ.get('PYTHONHTTPSVERIFY',
 '') and getattr(ssl, '_create_unverified_context', None): ssl._create_default_https_context = ssl._create_unverified_context allowSelfSignedHttps(True) # this line is needed if you use self-signed certificate in your scoring service. # Request data goes here
 # The example below assumes JSON formatting which may be updated # depending on the format your endpoint expects. # More information can be found here: # https://docs.microsoft.com/azure/machine-learning/how-to-deploy-advanced-entry-script data = { } body
 = str.encode(json.dumps(data)) url = 'http://20.96.44.183:80/api/v1/service/bertexpl/score' api_key = 'ewFVGMkduns4r45OWqkmh7OSs69pQ4Wt' # Replace this with the API key for the web service headers = {'Content-Type':'application/json', 'Authorization':('Bearer
 '+ api_key)} req = urllib.request.Request(url, body, headers) try: response = urllib.request.urlopen(req) result = response.read() print(result) except urllib.error.HTTPError as error: print("The request failed with status code: " + str(error.code)) # Print
 the headers - they include the requert ID and the timestamp, which are useful for debugging the failure print(error.info()) print(error.read().decode("utf8", 'ignore')) 




